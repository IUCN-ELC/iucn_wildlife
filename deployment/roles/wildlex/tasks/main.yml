---
- name: load vault variables
  include_vars: ../defaults/main_vault.yml

- name: Check SQL dump exists on remote
  stat:
    path: "{{ wildlex_sql_dump_path }}"
  register: wildlex_valid_db

- fail:
    msg: "Please install latest SQL dump file in {{ wildlex_sql_dump_path }}"
  when: not (wildlex_valid_db.stat.exists is defined and wildlex_valid_db.stat.exists)

- name: Check public files archive exists on remote
  stat:
    path: "{{ wildlex_public_files_path }}"
  register: wildlex_valid_public_files

- fail:
    msg: "Please install latest 'public' file archive in {{ wildlex_public_files_path }}"
  when: not (wildlex_valid_public_files.stat.exists is defined and wildlex_valid_public_files.stat.exists)

# Disabled because we are running this on preinstalled production machine)
#- name: install required system packages (disabled because we are running this on preinstalled production machine)
#  yum: name="{{ item }}" state="installed"
#  with_items: [
#    "MySQL-python", "git", "wget",
#    "httpd", "mariadb", "mariadb-server",
#    "php55w", "php55w-cli", "php55w-gd", "php55w-mbstring", "php55w-mysql", "php55w-xml"
#  ]

- name: create system accounts
  user: name="{{ item.username }}" comment="{{ item.comment|default('Created by Ansible deployment') }}"
    group="{{ item.group }}" groups="{{ item.groups }}"
    append="{{ item.append }}" shell="{{ item.shell|default('/bin/bash') }}"
    state="{{ item.state|default('present') }}"
  with_items:
    - { username: "php", group: "apache", groups: "users", append: "yes", password: "{{ user_php_hash }}" }
  tags:
    - create_system_users

- name: install openssh keys
  authorized_key: user="{{ item.username }}" key="{{ item.key }}" state="{{ item.state|default('present') }}"
  with_items: "{{ sshd_authorized_keys }}"
  tags:
    - create_system_users
    - install_sshm_keys

- name: install solr server & create wildlex core
  include_role:
    name: base-role-drupal-solr
  vars:
    drupal_solr4_cores: [ "wildlex" ]

- name: install drush command line
  include_role:
    name: base-role-drush

- name: ensure MariaDB is started
  service: name="mariadb" state="started"

- name: create mysql account
  mysql_user: name="{{ wildlex_db_user }}" password="{{ wildlex_db_password }}" priv="{{ wildlex_db_name }}.*:ALL"
    login_user="root" login_password="{{ ecolex_db_root_password }}"
    host="localhost" state="present" update_password="always"

- name: load mysql database
  mysql_db: name="{{ wildlex_db_name }}" state="import" target="{{ wildlex_sql_dump_path }}" login_user="root" login_password="{{ ecolex_db_root_password }}"

- name: clone code repo
  git: dest="{{ wildlex_project_home}}" repo="{{ wildlex_project_repository }}" version="master"

- name: create public files directory and set permissions
  file: owner="php" group="apache" path="{{ wildlex_project_home }}/docroot/sites/default/files" state="directory" mode="2770"

- name: unpack public files archive
  unarchive: src="{{ wildlex_public_files_path }}" dest="{{ wildlex_project_home }}/docroot/sites/default/files" owner="php" group="apache"
    creates="{{ wildlex_project_home }}/docroot/sites/default/files/field_files" remote_src="yes"

- name: set filesystem permissions
  file: owner="{{ item.owner }}" group="{{ item.group }}" recurse="{{ item.recurse }}" path="{{ item.path }}" state="{{ item.state }}"
  with_items:
    - { owner: "php" , group: "apache" , recurse: "yes" , path: "{{ wildlex_project_home }}" , state: "directory" }
    - { owner: "php" , group: "apache" , recurse: "no"  , path: "{{ wildlex_project_home }}/docroot/.htaccess" , state: "file" }

- name: reset public files directory permissions
  file: owner="php" group="apache" path="{{ wildlex_project_home }}/docroot/sites/default/files" state="directory" mode="2770"

- name: create settings.php
  template: src="templates/settings.local.php.j2" dest="{{ wildlex_project_home }}/docroot/sites/default/settings.local.php" owner="root" group="root"

- name: create virtual hosts
  template: src="templates/{{ item.template }}" dest="/etc/httpd/conf.d/{{ item.dest }}" owner="root" group="root"
  with_items: "{{ apache_virtual_hosts }}"
  notify: reload httpd server

- name: install cron
  template: src="templates/wildlex_prod.cron.j2" dest="/etc/cron.d/wildlex_prod.cron"
  notify: restart crond

- name: mkdir /opt/edw/system/oth
  file: path="/opt/edw/system/oth" state="directory"

- name: mkdir /opt/edw/system/bin
  file: path="/opt/edw/system/bin" state="directory"

- name: mkdir /etc/cron.edw/
  file: path="/etc/cron.edw/" state="directory"

- name: touch /etc/cron.edw/edw_crontab.cron
  file: path="/etc/cron.edw/edw_crontab.cron" state="touch"

- name: setup backup
  include_role:
    name: base-role-backup
  vars:
    server_hostname: "www.wildlex.org"
    server_ip: '138.201.83.138'
    backup_on_rsync: True
    backup_on_hetzner: False
    backup_want_monthly: True
    backup_want_yearly: True
    backup_emailrec: "drupal@eaudeweb.ro"
    backup_rscust: "IUCN"
    backup_rsproject: "WILDLEX"
    backup_rssite: "www.wildlex.org"
    backup_rsuser: "{{ backup_rsuser_vault }}"
    backup_rskey: "edw_id_rsa_wildlex_138.201.83.138"
    backup_rshost: "{{ backup_rshost_vault }}"
    backup_rstemp: "/root/tmp/rstmp"
    backup_paths:
      - path: "/etc"
        exclude:
      - path: "/var/www/html/wildlex"
        exclude:
    backup_rsprep:
      - "mysqldump -u root -p{{ ecolex_db_root_password }} wildlex 2>&1 1>${TEMPLOCAL}/wildlex.sql"
      - "gzip ${TEMPLOCAL}/wildlex.sql  2>&1 1>/dev/null"
    backup_hztemp:
    backup_hzcust:
    backup_hzproject:
    backup_hzsite:
    backup_hzhistlen:
    backup_hzuser:
    backup_hzbckdevdir:
    backup_hztargetdir:
    backup_hzpwd:

# - name: configure httpd caching
#  template: src="templates/expires.conf.j2" dest="/etc/httpd/conf.d/expires.conf" owner="root" group="root"
